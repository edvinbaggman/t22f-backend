import { Injectable } from '@nestjs/common';
import * as admin from 'firebase-admin';
import { Users } from './model/users.model';
import { CreateUsersDto } from './dto/create-users.dto';
import { CreatePlayersDto } from './dto/create-players.dto';
import { Players } from './model/players.model';
import crypto from 'crypto';
// import { Tournament } from 'src/tournaments/entities/tournament.entity';

@Injectable()
export class UsersService {
  private readonly firestore = admin.firestore();

  async findAll(): Promise<Users[]> {
    const snapshot = await this.firestore.collection('users').get();
    return snapshot.docs.map((doc) => ({
      id: doc.id,
      ...doc.data(),
    })) as Users[];
  }

  // get a user by id [TO CHECK : generated by AI]
  async findOne(userId: string): Promise<Users> {
    const userRef = this.firestore.collection('users').doc(userId);
    const userDoc = await userRef.get();
    if (!userDoc.exists) {
      throw new Error('User not found');
    }
    return { id: userDoc.id, ...userDoc.data() } as Users;
  }

  async createUser(user: CreateUsersDto): Promise<Users> {
    const newUser = { ...user, players: {} };
    const docRef = this.firestore.collection('users').doc(user.email);
    await docRef.set(newUser);
    const doc = await docRef.get();
    return { id: doc.id, ...doc.data() } as Users;
  }

  // async createUser(user: CreateUsersDto): Promise<Users> {
  //   const newUser = { ...user, players: {} }; // to add an empty array of players
  //   const docRef = await this.firestore.collection('users').add(newUser);
  //   const doc = await docRef.get();
  //   return { id: doc.id, ...doc.data() } as Users;
  // }

  async createPlayer(
    userId: string,
    player: CreatePlayersDto,
  ): Promise<Players> {
    const playerId = crypto.randomUUID();
    // console.log(player); // For debbuging
    const newPlayer = {
      name: player.name,
      id: playerId,
      stats: {},
    };
    // console.log(newPlayer); // For debbuging
    const userRef = this.firestore.collection('users').doc(userId);
    const userDoc = await userRef.get();
    if (!userDoc.exists) {
      throw new Error('User not found');
    }
    // const userData = userDoc.data(); // For debbuging
    // console.log(userData);
    const updateObject = {};
    updateObject[`players.${playerId}`] = newPlayer;
    await userRef.update(updateObject);

    return newPlayer;
  }

  async getPlayers(userId: string): Promise<string[]> {
    const userRef = this.firestore.collection('users').doc(userId);
    const userDoc = await userRef.get();

    if (!userDoc.exists) {
      throw new Error('User not found');
    }

    const userData = userDoc.data();
    // console.log(userData);
    const playerRefs = userData.players;
    const playerNames = Object.values(playerRefs).map(
      (player: any) => player.name,
    );
    // console.log(playerNames);

    return playerNames;
  }

  async renamePlayer(
    userId: string,
    playerId: string,
    renamePlayerDto: CreatePlayersDto,
  ): Promise<any> {
    const userRef = this.firestore.collection('users').doc(userId);
    const userDoc = await userRef.get();
    if (!userDoc.exists) {
      throw new Error('User not found');
    }
    const fieldPath = `players.${playerId}.name`;
    // console.log(fieldPath);

    await userRef.update({
      [fieldPath]: renamePlayerDto.name,
    });
    return renamePlayerDto;
  }

  // Calculate and return the number of games and won of all tournaments
  async getTotalStats(userId: string, playerId: string): Promise<any> {
    const userRef = this.firestore.collection('users').doc(userId);
    const userDoc = await userRef.get();
    if (!userDoc.exists) {
      throw new Error('User not found');
    }
    const userData = userDoc.data();

    if (!userData.players || !userData.players[playerId]) {
      throw new Error('Player not found');
    }

    let totalGames = 0;
    let totalWon = 0;
    let totalPoints = 0;
    for (const tournamentId in userData.players[playerId].stats) {
      if (userData.players[playerId].stats.hasOwnProperty(tournamentId)) {
        totalGames += userData.players[playerId].stats[tournamentId].games || 0;
        totalWon += userData.players[playerId].stats[tournamentId].won || 0;
        totalPoints +=
          userData.players[playerId].stats[tournamentId].points || 0;
      }
    }
    return {
      TotalGames: totalGames.toString(),
      TotalWon: totalWon.toString(),
      TotalPoints: totalPoints.toString(),
    };
  }

  // UPDAte name  of user [TO CHECK : generated by AI]
  async updateUser(
    userId: string,
    user: CreateUsersDto,
  ): Promise<CreateUsersDto> {
    const userRef = this.firestore.collection('users').doc(userId);
    const userDoc = await userRef.get();
    if (!userDoc.exists) {
      throw new Error('User not found');
    }
    await userRef.update({
      name: user.name,
    });
    return user;
  }
}
